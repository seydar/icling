% FILE:        gem.m
% PURPOSE:     Machine to execute self-describing grammars
% EXAMPLE:     
%   obj = gem();                          % constructor
%   deb = obj.nowhite;                    % a deblanking grammar
%   o = obj.run('x y z', deb)             % deblank string
%   o = obj.run('x y', deb, '-gemTrace')  % .. and trace steps

% COPYRIGHT:   1988 W. M. McKeeman.  You may do anything you like
%              with this file except remove or alter this notice.
% MODS:	       1988.06.02 -- mckeeman -- original
%              2008.06.11 -- mckeeman@dartmouth -- moved to MEX
%              2009.01.24 -- mckeeman@dartmouth -- reordered args

function obj = gem()
  EOL = 10;                                      % ASCII end of line
  obj = public();
  return;
  
  % ----------------------------------------------------
  
  % Run GEM.  The gtxt arg must be deblanked.
  function otxt = run(itxt, gtxt, flag)
    if nargin == 2
      otxt = iog(itxt, gtxt);                    % call mex
    else
      otxt = iog(itxt, gtxt, flag);
    end
  end

  function o = public()
    o = struct;
    o.run  = @run;  % execute GEM
    % Remember that in MATLAB, '' stands for ' in a string
    
    %    ------- input grammars -----------------
    
    % digits   (defines phrase name d) 
    o.digitCFG = sprintf('d=''%c'';','0':'9');
    % lower case letters  (defines phrase name l)
    o.lowerCFG = sprintf('l=''%c'';','a':'z');
    % upper case letters  (defines phrase name l)
    o.upperCFG = sprintf('l=''%c'';','A':'Z');
    % ASCII  (defines phrase name a)
    o.asciiCFG = sprintf('a=''%c'';',10,' ':'~');            
            
    % -------------- input/output grammars ----------------       
    % digits   (defines phrase name D)
    o.digitIOG = sprintf('D=''%c''"%c";',deal2('0':'9'));
    % lower case letters  (defines phrase name L)
    o.lowerIOG = sprintf('L=''%c''"%c";',deal2('a':'z'));
    % upper case letters  (defines phrase name L)
    o.upperIOG = sprintf('L=''%c''"%c";',deal2('A':'Z'));
    % asciiIO  (defines phrase names A)
    o.asciiIOG = sprintf('A=''%c''"%c";', EOL, EOL, deal2(' ':'~'));
    % !"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\]^_`abcdefghijklmnopqrstuvwxyz{|}~
    
    % A prescanned scanner (no whitespace)
    o.nowhite = [
      'g=pg;'          ...
      'g=;'            ...
      'p='' '';'       ...   discard blank
      'p=''' EOL ''';' ...   discard EOL
      'p=IAI;'         ...   keep input symbols
      'p=OAO;'         ...   keep output symbols
      'p=A;'           ...   keep everything else
      'I=''''''"''";'  ...   see ', send '
      'O=''"''""";'    ...   see ", send "
      o.asciiIOG
      ];
    
    % A prescanned scanner with multi-character I/O symbols
    o.nowhite2 = [
      'g=pg;'           ...
      'g=;'             ...
      'p='' '';'        ...  discard blank
      'p=''' EOL ''';'  ...  discard EOL
      'p=III;'          ...  keep '''
      'p=OOO;'          ...  keep """
      'p=''''''r;'      ...  expand 'input stuff'
      'p=''"''s;'       ...  expand "output stuff"
      'p=A;'            ...  pass everything else
      'r='''''';'       ...  comes after input stuff
      'r="''"A"''"r;'   ...  expand one  input char
      's=''"'';'        ...  comes after output stuff
      's="""A"""s;'     ...  expand one output char
      'I=''''''"''";'   ...  see ', send '
      'O=''"''""";'     ...  see ", send "
      o.asciiIOG
      ];
    
    % A pretty printer
    o.pretty = [
      'g = r g;'                       EOL ...
      'g =;'                           EOL ...
     ['r = L ''='' " " "=" f '';'' ";" "' EOL '";'] EOL ...
      'f = " " p f;'                   EOL ...
      'f =;'                           EOL ...
      'p = I A I;'                     EOL ...  pass input symbols
      'p = O A O;'                     EOL ...  pass output symbols
      'p = L;'                         EOL ...  pass letters
      'I = '''''' "''";'               EOL ...  see ', send '
      'O = ''"'' """;'                 EOL ...  see ", send "
      o.lowerIOG                       EOL ...  a:z
      o.upperIOG                       EOL ...  A:Z
      o.asciiIOG
      ];
    
    o.invert = [
      'g = p g;'                       EOL ...
      'g = ;'                          EOL ...
      'p = '''''' """ A '''''' """;'   EOL ...
      'p = ''"'' "''" A ''"'' "''";'   EOL ...
      'p = A;'                         EOL ...
      o.asciiIOG
      ];

    % a right associative grammar for + and -
    o.sum    = [
      'g = e         "0";'             EOL ...
      'e = t ''+'' e   "1";'           EOL ...
      'e = t ''-'' e   "2";'           EOL ...
      'e = t         "3";'             EOL ...
      't = ''x''       "4";'           EOL ...
      ];
    
    % left associative arithmetic expression to operator-late PFN
    o.postfix   = [
      'g = e;'                         EOL ...
      'e = t r;'                       EOL ...
      'r = ''+'' t "+" r;'             EOL ...
      'r = ''-'' t "-" r;'             EOL ...
      'r = ;'                          EOL ...
      't = f s;'                       EOL ...
      's = ''*'' f "*" s;'             EOL ...
      's = ''/'' f "/" s;'             EOL ...
      's = ;'                          EOL ...
      'f = L;'                         EOL ...
      'f = D;'                         EOL ...
      'f = ''('' e '')'';'             EOL ...
      o.lowerIOG                       EOL ...
      o.digitIOG
      ];
    
    % making X86 code
    o.x86   = [
      'g = e;'                         EOL ...
      'e = t r;'                       EOL ...
     ['r = ''+'' t "fadd' EOL '" r;']  EOL ...
     ['r = ''-'' t "fsub' EOL '" r;']  EOL ...
      'r = ;'                          EOL ...
      't = f s;'                       EOL ...
     ['s = ''*'' f "fmul' EOL '" s;']  EOL ...
     ['s = ''/'' f "fdiv' EOL '" s;']  EOL ...
      's = ;'                          EOL ...
     ['f = "fld " L "' EOL '";']       EOL ...
     ['f = "fld =" D "' EOL '";']      EOL ...
      'f = ''('' e '')'';'             EOL ...
      o.lowerIOG                       EOL ...
      o.digitIOG
      ];
   
    % left associative arithmetic expression to operator-early PFN
    o.prefix   = [
      'g = e;'                         EOL ...
      'e = "+" t ''+'' e;'             EOL ...
      'e = "-" t ''-'' e;'             EOL ...
      'e = t;'                         EOL ...
      't = "*" f ''*'' t;'             EOL ...
      't = "/" f ''/'' t;'             EOL ...
      't = f;'                         EOL ...
      'f = L;'                         EOL ...
      'f = D;'                         EOL ...
      'f = ''('' e '')'';'             EOL ...
      o.lowerIOG                       EOL ...
      o.digitIOG
      ];

    % expr with * to postfix PFN
    o.expr   = [
      'g = e;'                         EOL ...
      'e = t r*;'                      EOL ...
      'r = ''+'' t "+";'               EOL ...
      'r = ''-'' t "-";'               EOL ...
      't = f s*;'                      EOL ...
      's = ''*'' f "*";'               EOL ...
      's = ''/'' f "/";'               EOL ...
      'f = D;'                         EOL ...
      'f = ''('' e '')'';'             EOL ...
      o.digitIOG
      ];

    % a self-describing cfg (laid out for display)
    o.self   = [
      'g = r g;            g =;'               EOL ...
      'r = l ''='' f '';'';'                   EOL ...
      'f = p f;            f =;'               EOL ...
      'p = '''''' a '''''';      '             ,   ...
      'p = ''"'' a ''"'';      p = l;'         EOL ...  
      o.lowerCFG                               EOL ...
      o.upperCFG                               EOL ...
      o.asciiCFG
      ];
    
    % phrase names  (defines phrase names g r f a l)
    o.Vn   = [
      'g = r g;'                               EOL ...
      'g =;'                                   EOL ...
      'r = L ''='' f '';'';'                   EOL ...
      'f = p f;'                               EOL ...
      'f =;'                                   EOL ...
      'p = l;'                                 EOL ...
      'p = '''''' a '''''';'                   EOL ...
      'p = ''"'' a ''"'';'                     EOL ...
      o.lowerCFG                               EOL ...
      o.upperCFG                               EOL ...
      o.lowerIOG                               EOL ...
      o.upperIOG                               EOL ...
      o.asciiCFG                               EOL ...
      ];
    
    % adding the Kleene * to self
    o.self2 = [
      'g = r g;            g = ;'              EOL ...
      'r = l ''='' f '';'';'                   EOL ...
      'f = p f;            f = ;'              EOL ...
      'p = '''''' a '''''';      '             ,   ...
      'p = ''"'' a ''"'';      p = l ''*'';   p = l;'  EOL ...  
      o.lowerCFG                               EOL ...
      o.upperCFG                               EOL ...
      o.asciiCFG
      ];

    % an IOG pretty printer including *
    o.pretty2 = [
      'g = r g;'                               EOL ...
      'g =;'                                   EOL ...
     ['r = L ''='' " " "=" f '';'' ";" "' EOL '";'] EOL ...
      'f = " " p f;'                           EOL ...
      'f =;'                                   EOL ...
      'p = I A I;'                             EOL ...
      'p = O A O;'                             EOL ...
      'p = L ''*'' "*";'                       EOL ...
      'p = L ''+'' "+";'                       EOL ...
      'p = L;'                                 EOL ...
      'I = '''''' "''";'                       EOL ...  see ', send '
      'O = ''"'' """;'                         EOL ...  see ", send "
      o.lowerIOG                               EOL ...
      o.upperIOG                               EOL ...
      o.asciiIOG
      ];

    % using Kleene * to describe itself
    o.kleene = [
      'g = r*;'                                EOL ...
      'r = l ''='' f '';'';'                   EOL ...
      'f = p*;'                                EOL ...
      'p = '''''' a '''''';      '             ,   ...
      'p = ''"'' a ''"'';      p = l ''*'';   p = l;'  EOL ...  
      o.lowerCFG                               EOL ...
      o.upperCFG                               EOL ...
      o.asciiCFG
      ];
        
    % make rules for a* (only lower)     s = 'a*' "A=aA;A=;";
    o.nostar1 = [       
      'g = r g;'                               EOL ...
      'g =;'                                   EOL ...
      'r = l ''='' f '';'';'                   EOL ...
      'f = p f;'                               EOL ...
      'f =;'                                   EOL ...
      'p = '''''' a '''''';'                   EOL ...
      'p = ''"'' a ''"'';'                     EOL ...
      'p = s;'                                 EOL ...
      'p = l;'                                 EOL ...
      sprintf(sprintf('s=''%c*''"%%c=%c%%c;%%c=;";', ...
        deal2('a':'z')),deal3('A':'Z'))        EOL ...
      o.lowerCFG                               EOL ...
      o.upperCFG                               EOL ...
      o.asciiCFG
      ];

    % replace a* (only lower) with A
    o.nostar2 = [       
      'g = r g;'                               EOL ...
      'g =;'                                   EOL ...
      'r = L ''='' "="  f '';'' ";" ;'         EOL ...
      'f = p f;'                               EOL ...
      'f =;'                                   EOL ...
      'p = I A I;'                             EOL ...
      'p = O A O;'                             EOL ...
      'p = s;'                                 EOL ...
      'p = L;'                                 EOL ...
      'I = '''''' "''";'                       EOL ...  see ', send '
      'O = ''"''  """;'                        EOL ...  see ", send "
      sprintf('s=''%c*''"%c";', shuffle('a':'z','A':'Z'))  EOL ...
      o.lowerIOG                               EOL ...
      o.upperIOG                               EOL ...
      o.asciiIOG
      ];

    % replace a+ (only lower) with aa*
    o.noplus = [       
      'g = r g;'                               EOL ...
      'g =;'                                   EOL ...
      'r = L ''='' "="  f '';'' ";" ;'         EOL ...
      'f = p f;'                               EOL ...
      'f =;'                                   EOL ...
      'p = I A I;'                             EOL ...
      'p = O A O;'                             EOL ...
      'p = s;'                                 EOL ...
      'p = L;'                                 EOL ...
      'I = '''''' "''";'                       EOL ...  see ', send '
      'O = ''"''  """;'                        EOL ...  see ", send "
      sprintf('s=''%c+''"%c%c*";', deal3('a':'z'))  EOL ...
      o.lowerIOG                               EOL ...
      o.upperIOG                               EOL ...
      o.asciiIOG
      ];

  end

  % abc goes to aabbcc
  function pairs = deal2(chars)
    pairs = shuffle(chars, chars);
  end

% abc goes to aaabbbccc
  function triples = deal3(chars)
    triples = shuffle(chars, chars, chars);
  end

% abc 123 $#@ goes to a1$b2#c3@
  function deck = shuffle(varargin)
    na = nargin;
    nc = numel(varargin{1});
    for i=1:na
      deck(i:na:na*nc-na+i) = varargin{i};
    end
  end

end